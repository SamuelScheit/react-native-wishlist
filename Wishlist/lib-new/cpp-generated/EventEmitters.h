
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated by codegen project: GenerateEventEmitterH.js
 */
#pragma once

#include <react/renderer/components/view/ViewEventEmitter.h>

namespace facebook {
namespace react {

class MGWishListComponentEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  enum class OnBubblingEventDefinedInlineEnum_required {
    Small,
    Large
  };

  static char const *toString(const OnBubblingEventDefinedInlineEnum_required value) {
    switch (value) {
      case OnBubblingEventDefinedInlineEnum_required::Small: return "small";
      case OnBubblingEventDefinedInlineEnum_required::Large: return "large";
    }
  }

  enum class OnBubblingEventDefinedInlineEnum_optional_key {
    Small,
    Large
  };

  static char const *toString(const OnBubblingEventDefinedInlineEnum_optional_key value) {
    switch (value) {
      case OnBubblingEventDefinedInlineEnum_optional_key::Small: return "small";
      case OnBubblingEventDefinedInlineEnum_optional_key::Large: return "large";
    }
  }

  enum class OnBubblingEventDefinedInlineEnum_optional_value {
    Small,
    Large
  };

  static char const *toString(const OnBubblingEventDefinedInlineEnum_optional_value value) {
    switch (value) {
      case OnBubblingEventDefinedInlineEnum_optional_value::Small: return "small";
      case OnBubblingEventDefinedInlineEnum_optional_value::Large: return "large";
    }
  }

  enum class OnBubblingEventDefinedInlineEnum_optional_both {
    Small,
    Large
  };

  static char const *toString(const OnBubblingEventDefinedInlineEnum_optional_both value) {
    switch (value) {
      case OnBubblingEventDefinedInlineEnum_optional_both::Small: return "small";
      case OnBubblingEventDefinedInlineEnum_optional_both::Large: return "large";
    }
  }

  struct OnBubblingEventDefinedInlineObject_required {
      bool boolean_required;
    };

  struct OnBubblingEventDefinedInlineObject_optional_key {
      std::string string_optional_key;
    };

  struct OnBubblingEventDefinedInlineObject_optional_value {
      Float float_optional_value;
    };

  struct OnBubblingEventDefinedInlineObject_optional_both {
      int int32_optional_both;
    };

  struct OnBubblingEventDefinedInlineObject_required_nested_2_layersObject_optional_nested_1_layer {
      int boolean_required;
    std::string string_optional_key;
    double double_optional_value;
    Float float_optional_value;
    int int32_optional_both;
    };

  struct OnBubblingEventDefinedInlineObject_required_nested_2_layers {
      OnBubblingEventDefinedInlineObject_required_nested_2_layersObject_optional_nested_1_layer object_optional_nested_1_layer;
    };

  struct OnBubblingEventDefinedInlineObject_readonly_required {
      bool boolean_required;
    };

  struct OnBubblingEventDefinedInlineObject_readonly_optional_key {
      std::string string_optional_key;
    };

  struct OnBubblingEventDefinedInlineObject_readonly_optional_value {
      Float float_optional_value;
    };

  struct OnBubblingEventDefinedInlineObject_readonly_optional_both {
      int int32_optional_both;
    };

  struct OnBubblingEventDefinedInline {
      bool boolean_required;
    bool boolean_optional_key;
    bool boolean_optional_value;
    bool boolean_optional_both;
    std::string string_required;
    std::string string_optional_key;
    std::string string_optional_value;
    std::string string_optional_both;
    double double_required;
    double double_optional_key;
    double double_optional_value;
    double double_optional_both;
    Float float_required;
    Float float_optional_key;
    Float float_optional_value;
    Float float_optional_both;
    int int32_required;
    int int32_optional_key;
    int int32_optional_value;
    int int32_optional_both;
    OnBubblingEventDefinedInlineEnum_required enum_required;
    OnBubblingEventDefinedInlineEnum_optional_key enum_optional_key;
    OnBubblingEventDefinedInlineEnum_optional_value enum_optional_value;
    OnBubblingEventDefinedInlineEnum_optional_both enum_optional_both;
    OnBubblingEventDefinedInlineObject_required object_required;
    OnBubblingEventDefinedInlineObject_optional_key object_optional_key;
    OnBubblingEventDefinedInlineObject_optional_value object_optional_value;
    OnBubblingEventDefinedInlineObject_optional_both object_optional_both;
    OnBubblingEventDefinedInlineObject_required_nested_2_layers object_required_nested_2_layers;
    OnBubblingEventDefinedInlineObject_readonly_required object_readonly_required;
    OnBubblingEventDefinedInlineObject_readonly_optional_key object_readonly_optional_key;
    OnBubblingEventDefinedInlineObject_readonly_optional_value object_readonly_optional_value;
    OnBubblingEventDefinedInlineObject_readonly_optional_both object_readonly_optional_both;
    };

  enum class OnBubblingEventDefinedInlineWithPaperNameEnum_required {
    Small,
    Large
  };

  static char const *toString(const OnBubblingEventDefinedInlineWithPaperNameEnum_required value) {
    switch (value) {
      case OnBubblingEventDefinedInlineWithPaperNameEnum_required::Small: return "small";
      case OnBubblingEventDefinedInlineWithPaperNameEnum_required::Large: return "large";
    }
  }

  enum class OnBubblingEventDefinedInlineWithPaperNameEnum_optional_key {
    Small,
    Large
  };

  static char const *toString(const OnBubblingEventDefinedInlineWithPaperNameEnum_optional_key value) {
    switch (value) {
      case OnBubblingEventDefinedInlineWithPaperNameEnum_optional_key::Small: return "small";
      case OnBubblingEventDefinedInlineWithPaperNameEnum_optional_key::Large: return "large";
    }
  }

  enum class OnBubblingEventDefinedInlineWithPaperNameEnum_optional_value {
    Small,
    Large
  };

  static char const *toString(const OnBubblingEventDefinedInlineWithPaperNameEnum_optional_value value) {
    switch (value) {
      case OnBubblingEventDefinedInlineWithPaperNameEnum_optional_value::Small: return "small";
      case OnBubblingEventDefinedInlineWithPaperNameEnum_optional_value::Large: return "large";
    }
  }

  enum class OnBubblingEventDefinedInlineWithPaperNameEnum_optional_both {
    Small,
    Large
  };

  static char const *toString(const OnBubblingEventDefinedInlineWithPaperNameEnum_optional_both value) {
    switch (value) {
      case OnBubblingEventDefinedInlineWithPaperNameEnum_optional_both::Small: return "small";
      case OnBubblingEventDefinedInlineWithPaperNameEnum_optional_both::Large: return "large";
    }
  }

  struct OnBubblingEventDefinedInlineWithPaperNameObject_required {
      bool boolean_required;
    };

  struct OnBubblingEventDefinedInlineWithPaperNameObject_optional_key {
      std::string string_optional_key;
    };

  struct OnBubblingEventDefinedInlineWithPaperNameObject_optional_value {
      Float float_optional_value;
    };

  struct OnBubblingEventDefinedInlineWithPaperNameObject_optional_both {
      int int32_optional_both;
    };

  struct OnBubblingEventDefinedInlineWithPaperNameObject_required_nested_2_layersObject_optional_nested_1_layer {
      int boolean_required;
    std::string string_optional_key;
    double double_optional_value;
    Float float_optional_value;
    int int32_optional_both;
    };

  struct OnBubblingEventDefinedInlineWithPaperNameObject_required_nested_2_layers {
      OnBubblingEventDefinedInlineWithPaperNameObject_required_nested_2_layersObject_optional_nested_1_layer object_optional_nested_1_layer;
    };

  struct OnBubblingEventDefinedInlineWithPaperNameObject_readonly_required {
      bool boolean_required;
    };

  struct OnBubblingEventDefinedInlineWithPaperNameObject_readonly_optional_key {
      std::string string_optional_key;
    };

  struct OnBubblingEventDefinedInlineWithPaperNameObject_readonly_optional_value {
      Float float_optional_value;
    };

  struct OnBubblingEventDefinedInlineWithPaperNameObject_readonly_optional_both {
      int int32_optional_both;
    };

  struct OnBubblingEventDefinedInlineWithPaperName {
      bool boolean_required;
    bool boolean_optional_key;
    bool boolean_optional_value;
    bool boolean_optional_both;
    std::string string_required;
    std::string string_optional_key;
    std::string string_optional_value;
    std::string string_optional_both;
    double double_required;
    double double_optional_key;
    double double_optional_value;
    double double_optional_both;
    Float float_required;
    Float float_optional_key;
    Float float_optional_value;
    Float float_optional_both;
    int int32_required;
    int int32_optional_key;
    int int32_optional_value;
    int int32_optional_both;
    OnBubblingEventDefinedInlineWithPaperNameEnum_required enum_required;
    OnBubblingEventDefinedInlineWithPaperNameEnum_optional_key enum_optional_key;
    OnBubblingEventDefinedInlineWithPaperNameEnum_optional_value enum_optional_value;
    OnBubblingEventDefinedInlineWithPaperNameEnum_optional_both enum_optional_both;
    OnBubblingEventDefinedInlineWithPaperNameObject_required object_required;
    OnBubblingEventDefinedInlineWithPaperNameObject_optional_key object_optional_key;
    OnBubblingEventDefinedInlineWithPaperNameObject_optional_value object_optional_value;
    OnBubblingEventDefinedInlineWithPaperNameObject_optional_both object_optional_both;
    OnBubblingEventDefinedInlineWithPaperNameObject_required_nested_2_layers object_required_nested_2_layers;
    OnBubblingEventDefinedInlineWithPaperNameObject_readonly_required object_readonly_required;
    OnBubblingEventDefinedInlineWithPaperNameObject_readonly_optional_key object_readonly_optional_key;
    OnBubblingEventDefinedInlineWithPaperNameObject_readonly_optional_value object_readonly_optional_value;
    OnBubblingEventDefinedInlineWithPaperNameObject_readonly_optional_both object_readonly_optional_both;
    };

  enum class OnDirectEventDefinedInlineEnum_required {
    Small,
    Large
  };

  static char const *toString(const OnDirectEventDefinedInlineEnum_required value) {
    switch (value) {
      case OnDirectEventDefinedInlineEnum_required::Small: return "small";
      case OnDirectEventDefinedInlineEnum_required::Large: return "large";
    }
  }

  enum class OnDirectEventDefinedInlineEnum_optional_key {
    Small,
    Large
  };

  static char const *toString(const OnDirectEventDefinedInlineEnum_optional_key value) {
    switch (value) {
      case OnDirectEventDefinedInlineEnum_optional_key::Small: return "small";
      case OnDirectEventDefinedInlineEnum_optional_key::Large: return "large";
    }
  }

  enum class OnDirectEventDefinedInlineEnum_optional_value {
    Small,
    Large
  };

  static char const *toString(const OnDirectEventDefinedInlineEnum_optional_value value) {
    switch (value) {
      case OnDirectEventDefinedInlineEnum_optional_value::Small: return "small";
      case OnDirectEventDefinedInlineEnum_optional_value::Large: return "large";
    }
  }

  enum class OnDirectEventDefinedInlineEnum_optional_both {
    Small,
    Large
  };

  static char const *toString(const OnDirectEventDefinedInlineEnum_optional_both value) {
    switch (value) {
      case OnDirectEventDefinedInlineEnum_optional_both::Small: return "small";
      case OnDirectEventDefinedInlineEnum_optional_both::Large: return "large";
    }
  }

  struct OnDirectEventDefinedInlineObject_required {
      bool boolean_required;
    };

  struct OnDirectEventDefinedInlineObject_optional_key {
      std::string string_optional_key;
    };

  struct OnDirectEventDefinedInlineObject_optional_value {
      Float float_optional_value;
    };

  struct OnDirectEventDefinedInlineObject_optional_both {
      int int32_optional_both;
    };

  struct OnDirectEventDefinedInlineObject_required_nested_2_layersObject_optional_nested_1_layer {
      int boolean_required;
    std::string string_optional_key;
    double double_optional_value;
    Float float_optional_value;
    int int32_optional_both;
    };

  struct OnDirectEventDefinedInlineObject_required_nested_2_layers {
      OnDirectEventDefinedInlineObject_required_nested_2_layersObject_optional_nested_1_layer object_optional_nested_1_layer;
    };

  struct OnDirectEventDefinedInlineObject_readonly_required {
      bool boolean_required;
    };

  struct OnDirectEventDefinedInlineObject_readonly_optional_key {
      std::string string_optional_key;
    };

  struct OnDirectEventDefinedInlineObject_readonly_optional_value {
      Float float_optional_value;
    };

  struct OnDirectEventDefinedInlineObject_readonly_optional_both {
      int int32_optional_both;
    };

  struct OnDirectEventDefinedInline {
      bool boolean_required;
    bool boolean_optional_key;
    bool boolean_optional_value;
    bool boolean_optional_both;
    std::string string_required;
    std::string string_optional_key;
    std::string string_optional_value;
    std::string string_optional_both;
    double double_required;
    double double_optional_key;
    double double_optional_value;
    double double_optional_both;
    Float float_required;
    Float float_optional_key;
    Float float_optional_value;
    Float float_optional_both;
    int int32_required;
    int int32_optional_key;
    int int32_optional_value;
    int int32_optional_both;
    OnDirectEventDefinedInlineEnum_required enum_required;
    OnDirectEventDefinedInlineEnum_optional_key enum_optional_key;
    OnDirectEventDefinedInlineEnum_optional_value enum_optional_value;
    OnDirectEventDefinedInlineEnum_optional_both enum_optional_both;
    OnDirectEventDefinedInlineObject_required object_required;
    OnDirectEventDefinedInlineObject_optional_key object_optional_key;
    OnDirectEventDefinedInlineObject_optional_value object_optional_value;
    OnDirectEventDefinedInlineObject_optional_both object_optional_both;
    OnDirectEventDefinedInlineObject_required_nested_2_layers object_required_nested_2_layers;
    OnDirectEventDefinedInlineObject_readonly_required object_readonly_required;
    OnDirectEventDefinedInlineObject_readonly_optional_key object_readonly_optional_key;
    OnDirectEventDefinedInlineObject_readonly_optional_value object_readonly_optional_value;
    OnDirectEventDefinedInlineObject_readonly_optional_both object_readonly_optional_both;
    };

  enum class OnDirectEventDefinedInlineWithPaperNameEnum_required {
    Small,
    Large
  };

  static char const *toString(const OnDirectEventDefinedInlineWithPaperNameEnum_required value) {
    switch (value) {
      case OnDirectEventDefinedInlineWithPaperNameEnum_required::Small: return "small";
      case OnDirectEventDefinedInlineWithPaperNameEnum_required::Large: return "large";
    }
  }

  enum class OnDirectEventDefinedInlineWithPaperNameEnum_optional_key {
    Small,
    Large
  };

  static char const *toString(const OnDirectEventDefinedInlineWithPaperNameEnum_optional_key value) {
    switch (value) {
      case OnDirectEventDefinedInlineWithPaperNameEnum_optional_key::Small: return "small";
      case OnDirectEventDefinedInlineWithPaperNameEnum_optional_key::Large: return "large";
    }
  }

  enum class OnDirectEventDefinedInlineWithPaperNameEnum_optional_value {
    Small,
    Large
  };

  static char const *toString(const OnDirectEventDefinedInlineWithPaperNameEnum_optional_value value) {
    switch (value) {
      case OnDirectEventDefinedInlineWithPaperNameEnum_optional_value::Small: return "small";
      case OnDirectEventDefinedInlineWithPaperNameEnum_optional_value::Large: return "large";
    }
  }

  enum class OnDirectEventDefinedInlineWithPaperNameEnum_optional_both {
    Small,
    Large
  };

  static char const *toString(const OnDirectEventDefinedInlineWithPaperNameEnum_optional_both value) {
    switch (value) {
      case OnDirectEventDefinedInlineWithPaperNameEnum_optional_both::Small: return "small";
      case OnDirectEventDefinedInlineWithPaperNameEnum_optional_both::Large: return "large";
    }
  }

  struct OnDirectEventDefinedInlineWithPaperNameObject_required {
      bool boolean_required;
    };

  struct OnDirectEventDefinedInlineWithPaperNameObject_optional_key {
      std::string string_optional_key;
    };

  struct OnDirectEventDefinedInlineWithPaperNameObject_optional_value {
      Float float_optional_value;
    };

  struct OnDirectEventDefinedInlineWithPaperNameObject_optional_both {
      int int32_optional_both;
    };

  struct OnDirectEventDefinedInlineWithPaperNameObject_required_nested_2_layersObject_optional_nested_1_layer {
      int boolean_required;
    std::string string_optional_key;
    double double_optional_value;
    Float float_optional_value;
    int int32_optional_both;
    };

  struct OnDirectEventDefinedInlineWithPaperNameObject_required_nested_2_layers {
      OnDirectEventDefinedInlineWithPaperNameObject_required_nested_2_layersObject_optional_nested_1_layer object_optional_nested_1_layer;
    };

  struct OnDirectEventDefinedInlineWithPaperNameObject_readonly_required {
      bool boolean_required;
    };

  struct OnDirectEventDefinedInlineWithPaperNameObject_readonly_optional_key {
      std::string string_optional_key;
    };

  struct OnDirectEventDefinedInlineWithPaperNameObject_readonly_optional_value {
      Float float_optional_value;
    };

  struct OnDirectEventDefinedInlineWithPaperNameObject_readonly_optional_both {
      int int32_optional_both;
    };

  struct OnDirectEventDefinedInlineWithPaperName {
      bool boolean_required;
    bool boolean_optional_key;
    bool boolean_optional_value;
    bool boolean_optional_both;
    std::string string_required;
    std::string string_optional_key;
    std::string string_optional_value;
    std::string string_optional_both;
    double double_required;
    double double_optional_key;
    double double_optional_value;
    double double_optional_both;
    Float float_required;
    Float float_optional_key;
    Float float_optional_value;
    Float float_optional_both;
    int int32_required;
    int int32_optional_key;
    int int32_optional_value;
    int int32_optional_both;
    OnDirectEventDefinedInlineWithPaperNameEnum_required enum_required;
    OnDirectEventDefinedInlineWithPaperNameEnum_optional_key enum_optional_key;
    OnDirectEventDefinedInlineWithPaperNameEnum_optional_value enum_optional_value;
    OnDirectEventDefinedInlineWithPaperNameEnum_optional_both enum_optional_both;
    OnDirectEventDefinedInlineWithPaperNameObject_required object_required;
    OnDirectEventDefinedInlineWithPaperNameObject_optional_key object_optional_key;
    OnDirectEventDefinedInlineWithPaperNameObject_optional_value object_optional_value;
    OnDirectEventDefinedInlineWithPaperNameObject_optional_both object_optional_both;
    OnDirectEventDefinedInlineWithPaperNameObject_required_nested_2_layers object_required_nested_2_layers;
    OnDirectEventDefinedInlineWithPaperNameObject_readonly_required object_readonly_required;
    OnDirectEventDefinedInlineWithPaperNameObject_readonly_optional_key object_readonly_optional_key;
    OnDirectEventDefinedInlineWithPaperNameObject_readonly_optional_value object_readonly_optional_value;
    OnDirectEventDefinedInlineWithPaperNameObject_readonly_optional_both object_readonly_optional_both;
    };

  void onBubblingEventDefinedInline(OnBubblingEventDefinedInline value) const;

  void onBubblingEventDefinedInlineWithPaperName(OnBubblingEventDefinedInlineWithPaperName value) const;

  void onDirectEventDefinedInline(OnDirectEventDefinedInline value) const;

  void onDirectEventDefinedInlineWithPaperName(OnDirectEventDefinedInlineWithPaperName value) const;
};

} // namespace react
} // namespace facebook
